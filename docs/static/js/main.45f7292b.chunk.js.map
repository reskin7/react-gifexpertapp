{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","setQuantity","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","cats","type","value","onChange","target","htmlFor","name","id","getGifs","category","quantity","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YAAkB,EACzBC,mBAAS,IADgB,mBACtDC,EADsD,KAC1CC,EAD0C,KAoB7D,OACE,uBAAMC,SAda,SAACC,GACpBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC7BT,GAAc,SAACU,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAShB,UACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAnBhB,SAACP,GACzBF,EAAcE,EAAMQ,OAAOF,UAmBzB,uBACA,uBACA,wBAAOG,QAAQ,WAAf,kEACwD,WAExD,yBAAQC,KAAK,WAAWC,GAAG,WAAWJ,SAZnB,SAACP,GACtBL,EAAYK,EAAMQ,OAAOF,QAWvB,UACE,wBAAQA,MAAO,EAAf,eACA,wBAAQA,MAAO,EAAf,eACA,wBAAQA,MAAO,EAAf,eACA,wBAAQA,MAAO,GAAf,uB,+BCnCKM,EAAO,uCAAG,WAAOC,EAAUC,GAAjB,uBAAAC,EAAA,4DACL,mCAEVC,EAHe,iDAGiCC,UACpDJ,GAJmB,kBAKVC,EALU,oBACL,oCADK,SAMFI,MAAMF,GANJ,cAMfG,EANe,gBAOEA,EAAKC,OAPP,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLb,GAAIa,EAAIb,GACRc,MAAOD,EAAIC,MACXT,IAAKQ,EAAIE,OAAOC,iBAAiBX,QAbhB,kBAgBdM,GAhBc,4CAAH,wDCEPM,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACnC,OACE,sBAAKa,UAAU,yCAAf,UACE,kCAAKJ,EAAL,OACA,qBAAKK,IAAKd,EAAKe,IAAKN,QCDbO,EAAU,SAAC,GAA4B,IAA1BnB,EAAyB,EAAzBA,SAAyB,ECHvB,SAACA,EAAUC,GAAc,IAAD,EACxBlB,mBAAS,CACjCyB,KAAM,GACNY,SAAS,IAHuC,mBAC3CC,EAD2C,KACpCC,EADoC,KAelD,OATAC,qBAAU,WACRxB,EAAQC,EAAUC,GAAUuB,MAAK,SAACC,GAChCH,EAAS,CACPd,KAAMiB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDV2BK,CAAa1B,EAFE,EAAfC,UAEpBY,EAFmC,EAEzCL,KAAcY,EAF2B,EAE3BA,QAMtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOH,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIb,aEGxB6B,EAnBM,WAAO,IAAD,EACW5C,mBAAS,CAAC,cADrB,mBAClB6C,EADkB,KACN/C,EADM,OAEOE,mBAAS,GAFhB,mBAElBkB,EAFkB,KAERnB,EAFQ,KAIzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaD,cAAeA,EAAeC,YAAaA,IACxD,uBAEA,6BACG8C,EAAWlB,KAAI,SAACnB,GAAD,OACd,cAAC,EAAD,CAAoBS,SAAUT,EAAMU,SAAUA,GAAhCV,YCXxBsC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.45f7292b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories, setQuantity }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  };\n\n  const handleQuantity = (event) => {\n    setQuantity(event.target.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n      <br />\n      <br />\n      <label htmlFor=\"quantity\">\n        Selecciona la cantidad de imagenes que quieres traer {'\\n \\n'}\n      </label>\n      <select name=\"selector\" id=\"quantity\" onChange={handleQuantity}>\n        <option value={1}>1</option>\n        <option value={3}>3</option>\n        <option value={5}>5</option>\n        <option value={10}>10</option>\n      </select>\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category, quantity) => {\n  const api_key = 'jIe1oFlypL5uXVad4v7jCehc8FiVSDMF';\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=${quantity}&api_key=${api_key}`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <p> {title} </p>\n      <img src={url} alt={title} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category, quantity }) => {\n  // const [images, setImages] = useState([]);\n  const { data: images, loading } = useFetchGifs(category, quantity); // \"data: images\" es para renombrar....\"data\" lo voy a poder usar como si fuera una variable de nombre \"images\"\n\n  // useEffect(() => {\n  //   getGifs(category).then(setImages);\n  // }, [category]);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => {\n          return <GifGridItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\nexport const useFetchGifs = (category, quantity) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category, quantity).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Overwatch']);\n  const [quantity, setQuantity] = useState(1);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} setQuantity={setQuantity} />\n      <hr />\n\n      <ol>\n        {categories.map((cats) => (\n          <GifGrid key={cats} category={cats} quantity={quantity} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}